(* =====================================================
   TechFlow - Gramática EBNF
   Linguagem inclusiva com suporte a variáveis, controle de fluxo, funções, etc.
   ===================================================== *)

(* Programa completo *)
programa       = "boot", identificador, declaracoes, "shutdown", identificador ;

(* Lista de declarações *)
declaracoes    = { declaracao } ;

(* Tipos de declaração *)
declaracao     = declaracao_variavel
               | estrutura_controle
               | chamada_funcao
               | definicao_funcao
               | comando_saida
               | comando_retorno ;

(* Tipos de variáveis *)
declaracao_variavel = tipo, identificador, "=", expressao ;

tipo           = "byte" | "bit" | "chip" ;

(* Estruturas de controle *)
estrutura_controle = condicional
                   | loop_para
                   | loop_enquanto ;

(* Condicional estilo if-else *)
condicional    = "ping", expressao, "process", declaracoes, "ping_end",
                 [ "pong", "process", declaracoes, "pong_end" ] ;

(* Loop estilo for *)
loop_para      = "loop", expressao, "as", identificador, "process", declaracoes, "loop_end" ;

(* Loop estilo while *)
loop_enquanto  = "stream", expressao, "process", declaracoes, "stream_end" ;

(* Definição de função *)
definicao_funcao = "module", identificador, "(", [ parametros ], ")",
                   "process", declaracoes,
                   [ comando_retorno ],
                   "module_end" ;

parametros     = identificador, { ",", identificador } ;

(* Chamada de função *)
chamada_funcao = identificador, "(", [ argumentos ], ")" ;

argumentos     = expressao, { ",", expressao } ;

(* Comando de saída *)
comando_saida  = "log", expressao ;

(* Comando de retorno *)
comando_retorno = "return", expressao ;

(* Expressões aritméticas e lógicas *)
expressao      = termo, { operador, termo } ;

termo          = identificador
               | literal
               | chamada_funcao
               | "(", expressao, ")" ;

operador       = "+" | "-" | "*" | "/" 
               | "==" | "!=" | ">" | "<" | ">=" | "<=" ;

(* Elementos básicos *)
identificador  = letra, { letra | digito } ;

letra          = "a" .. "z" | "A" .. "Z" | "_" ;

digito         = "0" .. "9" ;

literal        = string | numero ;

string         = '"', { qualquer_caractere }, '"' ;

numero         = digito, { digito } ;

qualquer_caractere = ? qualquer caractere exceto aspas duplas ? ;